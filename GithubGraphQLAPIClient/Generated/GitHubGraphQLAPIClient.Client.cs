// <auto-generated/>
#nullable enable

namespace GitHubGraphQLAPI.Client
{
    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResult : global::System.IEquatable<ExampleQueryResult>, IExampleQueryResult
    {
        public ExampleQueryResult(global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer viewer)
        {
            Viewer = viewer;
        }

        /// <summary>
        /// The currently authenticated user.
        /// </summary>
        public global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer Viewer { get; }

        public virtual global::System.Boolean Equals(ExampleQueryResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Viewer.Equals(other.Viewer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQueryResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Viewer.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A user is an individual's account on GitHub that owns repositories and can make new content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Viewer_User : global::System.IEquatable<ExampleQuery_Viewer_User>, IExampleQuery_Viewer_User
    {
        public ExampleQuery_Viewer_User(global::System.String login, global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer_Sponsors sponsors)
        {
            Login = login;
            Sponsors = sponsors;
        }

        /// <summary>
        /// The username used to login.
        /// </summary>
        public global::System.String Login { get; }

        /// <summary>
        /// List of sponsors for this user or organization.
        /// </summary>
        public global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer_Sponsors Sponsors { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Viewer_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Login.Equals(other.Login)) && Sponsors.Equals(other.Sponsors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Viewer_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Login.GetHashCode();
                hash ^= 397 * Sponsors.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for Sponsor.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Viewer_Sponsors_SponsorConnection : global::System.IEquatable<ExampleQuery_Viewer_Sponsors_SponsorConnection>, IExampleQuery_Viewer_Sponsors_SponsorConnection
    {
        public ExampleQuery_Viewer_Sponsors_SponsorConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Viewer_Sponsors_SponsorConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Viewer_Sponsors_SponsorConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQueryResult
    {
        /// <summary>
        /// The currently authenticated user.
        /// </summary>
        public global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer Viewer { get; }
    }

    /// <summary>
    /// A user is an individual's account on GitHub that owns repositories and can make new content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Viewer
    {
        /// <summary>
        /// The username used to login.
        /// </summary>
        public global::System.String Login { get; }

        /// <summary>
        /// List of sponsors for this user or organization.
        /// </summary>
        public global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer_Sponsors Sponsors { get; }
    }

    /// <summary>
    /// A user is an individual's account on GitHub that owns repositories and can make new content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Viewer_User : IExampleQuery_Viewer
    {
    }

    /// <summary>
    /// The connection type for Sponsor.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Viewer_Sponsors
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// The connection type for Sponsor.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Viewer_Sponsors_SponsorConnection : IExampleQuery_Viewer_Sponsors
    {
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   viewer {
    ///     __typename
    ///     login
    ///     sponsors {
    ///       __typename
    ///       totalCount
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryQueryDocument : global::StrawberryShake.IDocument
    {
        private ExampleQueryQueryDocument()
        {
        }

        public static ExampleQueryQueryDocument Instance { get; } = new ExampleQueryQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0a475b0f64172f82b539b5f97af4103e");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   viewer {
    ///     __typename
    ///     login
    ///     sponsors {
    ///       __typename
    ///       totalCount
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryQuery : global::GitHubGraphQLAPI.Client.IExampleQueryQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IExampleQueryResult> _operationExecutor;
        public ExampleQueryQuery(global::StrawberryShake.IOperationExecutor<IExampleQueryResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IExampleQueryResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IExampleQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IExampleQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ExampleQueryQueryDocument.Instance.Hash.Value, name: "ExampleQuery", document: ExampleQueryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   viewer {
    ///     __typename
    ///     login
    ///     sponsors {
    ///       __typename
    ///       totalCount
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQueryQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IExampleQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IExampleQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GitHubGraphQLAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class GitHubGraphQLAPIClient : global::GitHubGraphQLAPI.Client.IGitHubGraphQLAPIClient
    {
        private readonly global::GitHubGraphQLAPI.Client.IExampleQueryQuery _exampleQuery;
        public GitHubGraphQLAPIClient(global::GitHubGraphQLAPI.Client.IExampleQueryQuery exampleQuery)
        {
            _exampleQuery = exampleQuery ?? throw new global::System.ArgumentNullException(nameof(exampleQuery));
        }

        public static global::System.String ClientName => "GitHubGraphQLAPIClient";
        public global::GitHubGraphQLAPI.Client.IExampleQueryQuery ExampleQuery => _exampleQuery;
    }

    /// <summary>
    /// Represents the GitHubGraphQLAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IGitHubGraphQLAPIClient
    {
        global::GitHubGraphQLAPI.Client.IExampleQueryQuery ExampleQuery { get; }
    }
}

namespace GitHubGraphQLAPI.Client.State
{
    ///<summary>A user is an individual's account on GitHub that owns repositories and can make new content.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class UserEntity
    {
        public UserEntity(global::System.String login = default !, global::GitHubGraphQLAPI.Client.State.SponsorConnectionData sponsors = default !)
        {
            Login = login;
            Sponsors = sponsors;
        }

        ///<summary>The username used to login.</summary>
        public global::System.String Login { get; }

        ///<summary>List of sponsors for this user or organization.</summary>
        public global::GitHubGraphQLAPI.Client.State.SponsorConnectionData Sponsors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GitHubGraphQLAPI.Client.ExampleQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GitHubGraphQLAPI.Client.State.UserEntity, ExampleQuery_Viewer_User> _exampleQuery_Viewer_UserFromUserEntityMapper;
        public ExampleQueryResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GitHubGraphQLAPI.Client.State.UserEntity, ExampleQuery_Viewer_User> exampleQuery_Viewer_UserFromUserEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _exampleQuery_Viewer_UserFromUserEntityMapper = exampleQuery_Viewer_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(exampleQuery_Viewer_UserFromUserEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GitHubGraphQLAPI.Client.IExampleQueryResult);
        public ExampleQueryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ExampleQueryResultInfo info)
            {
                return new ExampleQueryResult(MapNonNullableIExampleQuery_Viewer(info.Viewer, snapshot));
            }

            throw new global::System.ArgumentException("ExampleQueryResultInfo expected.");
        }

        private global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer MapNonNullableIExampleQuery_Viewer(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _exampleQuery_Viewer_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::GitHubGraphQLAPI.Client.State.UserEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ExampleQueryResultInfo(global::StrawberryShake.EntityId viewer, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Viewer = viewer;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// The currently authenticated user.
        /// </summary>
        public global::StrawberryShake.EntityId Viewer { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ExampleQueryResultInfo(Viewer, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryBuilder : global::StrawberryShake.OperationResultBuilder<global::GitHubGraphQLAPI.Client.IExampleQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public ExampleQueryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GitHubGraphQLAPI.Client.IExampleQueryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::GitHubGraphQLAPI.Client.IExampleQueryResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId viewerId = default !;
            _entityStore.Update(session =>
            {
                viewerId = Update_NonNullableIExampleQuery_ViewerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "viewer"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new ExampleQueryResultInfo(viewerId, entityIds, snapshot.Version);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIExampleQuery_ViewerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GitHubGraphQLAPI.Client.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::GitHubGraphQLAPI.Client.State.UserEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login")), Deserialize_NonNullableIExampleQuery_Viewer_Sponsors(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sponsors"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GitHubGraphQLAPI.Client.State.UserEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login")), Deserialize_NonNullableIExampleQuery_Viewer_Sponsors(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sponsors"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::GitHubGraphQLAPI.Client.State.SponsorConnectionData Deserialize_NonNullableIExampleQuery_Viewer_Sponsors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SponsorConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GitHubGraphQLAPI.Client.State.SponsorConnectionData(typename, totalCount: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    ///<summary>The connection type for Sponsor.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class SponsorConnectionData
    {
        public SponsorConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Viewer_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::GitHubGraphQLAPI.Client.State.UserEntity, ExampleQuery_Viewer_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ExampleQuery_Viewer_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ExampleQuery_Viewer_User Map(global::GitHubGraphQLAPI.Client.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ExampleQuery_Viewer_User(entity.Login, MapNonNullableIExampleQuery_Viewer_Sponsors(entity.Sponsors, snapshot));
        }

        private global::GitHubGraphQLAPI.Client.IExampleQuery_Viewer_Sponsors MapNonNullableIExampleQuery_Viewer_Sponsors(global::GitHubGraphQLAPI.Client.State.SponsorConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IExampleQuery_Viewer_Sponsors returnValue = default !;
            if (data.__typename.Equals("SponsorConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new ExampleQuery_Viewer_Sponsors_SponsorConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class GitHubGraphQLAPIClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "User" => ParseUserEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "User" => FormatUserEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class GitHubGraphQLAPIClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GitHubGraphQLAPIClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public static partial class GitHubGraphQLAPIClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GitHubGraphQLAPI.Client.State.GitHubGraphQLAPIClientStoreAccessor> AddGitHubGraphQLAPIClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GitHubGraphQLAPI.Client.State.GitHubGraphQLAPIClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.ExampleQueryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.GitHubGraphQLAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.IGitHubGraphQLAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GitHubGraphQLAPI.Client.State.GitHubGraphQLAPIClientStoreAccessor>("GitHubGraphQLAPIClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GitHubGraphQLAPIClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GitHubGraphQLAPI.Client.State.UserEntity, global::GitHubGraphQLAPI.Client.ExampleQuery_Viewer_User>, global::GitHubGraphQLAPI.Client.State.ExampleQuery_Viewer_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GitHubGraphQLAPI.Client.IExampleQueryResult>, global::GitHubGraphQLAPI.Client.State.ExampleQueryResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GitHubGraphQLAPI.Client.IExampleQueryResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.IExampleQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GitHubGraphQLAPI.Client.IExampleQueryResult>, global::GitHubGraphQLAPI.Client.State.ExampleQueryBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GitHubGraphQLAPI.Client.IExampleQueryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GitHubGraphQLAPI.Client.IExampleQueryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GitHubGraphQLAPI.Client.IExampleQueryResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GitHubGraphQLAPI.Client.ExampleQueryQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GitHubGraphQLAPI.Client.IExampleQueryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.ExampleQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GitHubGraphQLAPI.Client.State.GitHubGraphQLAPIClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GitHubGraphQLAPI.Client.GitHubGraphQLAPIClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GitHubGraphQLAPI.Client.IGitHubGraphQLAPIClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GitHubGraphQLAPI.Client.GitHubGraphQLAPIClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
