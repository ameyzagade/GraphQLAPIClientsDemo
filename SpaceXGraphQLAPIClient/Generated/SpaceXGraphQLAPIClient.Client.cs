// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public static partial class SpaceXGraphQLAPIClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::SpaceXGraphQLAPI.Client.State.SpaceXGraphQLAPIClientStoreAccessor> AddSpaceXGraphQLAPIClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::SpaceXGraphQLAPI.Client.State.SpaceXGraphQLAPIClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.ExampleQueryQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.SpaceXGraphQLAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.ISpaceXGraphQLAPIClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::SpaceXGraphQLAPI.Client.State.SpaceXGraphQLAPIClientStoreAccessor>("SpaceXGraphQLAPIClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("SpaceXGraphQLAPIClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::SpaceXGraphQLAPI.Client.State.MissionEntity, global::SpaceXGraphQLAPI.Client.ExampleQuery_Missions_Mission>, global::SpaceXGraphQLAPI.Client.State.ExampleQuery_Missions_MissionFromMissionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::SpaceXGraphQLAPI.Client.IExampleQueryResult>, global::SpaceXGraphQLAPI.Client.State.ExampleQueryResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::SpaceXGraphQLAPI.Client.IExampleQueryResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.IExampleQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SpaceXGraphQLAPI.Client.IExampleQueryResult>, global::SpaceXGraphQLAPI.Client.State.ExampleQueryBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::SpaceXGraphQLAPI.Client.IExampleQueryResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::SpaceXGraphQLAPI.Client.IExampleQueryResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::SpaceXGraphQLAPI.Client.IExampleQueryResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SpaceXGraphQLAPI.Client.ExampleQueryQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SpaceXGraphQLAPI.Client.IExampleQueryQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.ExampleQueryQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::SpaceXGraphQLAPI.Client.State.SpaceXGraphQLAPIClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SpaceXGraphQLAPI.Client.SpaceXGraphQLAPIClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::SpaceXGraphQLAPI.Client.ISpaceXGraphQLAPIClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::SpaceXGraphQLAPI.Client.SpaceXGraphQLAPIClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace SpaceXGraphQLAPI.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResult : global::System.IEquatable<ExampleQueryResult>, IExampleQueryResult
    {
        public ExampleQueryResult(global::SpaceXGraphQLAPI.Client.IExampleQuery_Company? company, global::SpaceXGraphQLAPI.Client.IExampleQuery_Roadster? roadster, global::System.Collections.Generic.IReadOnlyList<global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions?>? missions)
        {
            Company = company;
            Roadster = roadster;
            Missions = missions;
        }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company? Company { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Roadster? Roadster { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions?>? Missions { get; }

        public virtual global::System.Boolean Equals(ExampleQueryResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Company is null && other.Company is null) || Company != null && Company.Equals(other.Company))) && ((Roadster is null && other.Roadster is null) || Roadster != null && Roadster.Equals(other.Roadster)) && global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Missions, other.Missions);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQueryResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Company != null)
                {
                    hash ^= 397 * Company.GetHashCode();
                }

                if (Roadster != null)
                {
                    hash ^= 397 * Roadster.GetHashCode();
                }

                if (Missions != null)
                {
                    foreach (var Missions_elm in Missions)
                    {
                        if (Missions_elm != null)
                        {
                            hash ^= 397 * Missions_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Company_Info : global::System.IEquatable<ExampleQuery_Company_Info>, IExampleQuery_Company_Info
    {
        public ExampleQuery_Company_Info(global::System.String? ceo, global::System.String? coo, global::System.String? cto, global::System.Int32? employees, global::System.String? summary, global::System.String? name, global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Links? links, global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Headquarters? headquarters)
        {
            Ceo = ceo;
            Coo = coo;
            Cto = cto;
            Employees = employees;
            Summary = summary;
            Name = name;
            Links = links;
            Headquarters = headquarters;
        }

        public global::System.String? Ceo { get; }

        public global::System.String? Coo { get; }

        public global::System.String? Cto { get; }

        public global::System.Int32? Employees { get; }

        public global::System.String? Summary { get; }

        public global::System.String? Name { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Links? Links { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Headquarters? Headquarters { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Company_Info? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Ceo is null && other.Ceo is null) || Ceo != null && Ceo.Equals(other.Ceo))) && ((Coo is null && other.Coo is null) || Coo != null && Coo.Equals(other.Coo)) && ((Cto is null && other.Cto is null) || Cto != null && Cto.Equals(other.Cto)) && Employees == other.Employees && ((Summary is null && other.Summary is null) || Summary != null && Summary.Equals(other.Summary)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Links is null && other.Links is null) || Links != null && Links.Equals(other.Links)) && ((Headquarters is null && other.Headquarters is null) || Headquarters != null && Headquarters.Equals(other.Headquarters));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Company_Info)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Ceo != null)
                {
                    hash ^= 397 * Ceo.GetHashCode();
                }

                if (Coo != null)
                {
                    hash ^= 397 * Coo.GetHashCode();
                }

                if (Cto != null)
                {
                    hash ^= 397 * Cto.GetHashCode();
                }

                if (Employees != null)
                {
                    hash ^= 397 * Employees.GetHashCode();
                }

                if (Summary != null)
                {
                    hash ^= 397 * Summary.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Links != null)
                {
                    hash ^= 397 * Links.GetHashCode();
                }

                if (Headquarters != null)
                {
                    hash ^= 397 * Headquarters.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Roadster_Roadster : global::System.IEquatable<ExampleQuery_Roadster_Roadster>, IExampleQuery_Roadster_Roadster
    {
        public ExampleQuery_Roadster_Roadster(global::System.Double? apoapsis_Au)
        {
            Apoapsis_au = apoapsis_Au;
        }

        public global::System.Double? Apoapsis_au { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Roadster_Roadster? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Apoapsis_au == other.Apoapsis_au);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Roadster_Roadster)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Apoapsis_au != null)
                {
                    hash ^= 397 * Apoapsis_au.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Missions_Mission : global::System.IEquatable<ExampleQuery_Missions_Mission>, IExampleQuery_Missions_Mission
    {
        public ExampleQuery_Missions_Mission(global::System.String? id, global::System.String? name)
        {
            Id = id;
            Name = name;
        }

        public global::System.String? Id { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Missions_Mission? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Missions_Mission)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Company_Links_InfoLinks : global::System.IEquatable<ExampleQuery_Company_Links_InfoLinks>, IExampleQuery_Company_Links_InfoLinks
    {
        public ExampleQuery_Company_Links_InfoLinks(global::System.String? website)
        {
            Website = website;
        }

        public global::System.String? Website { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Company_Links_InfoLinks? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Website is null && other.Website is null) || Website != null && Website.Equals(other.Website)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Company_Links_InfoLinks)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Website != null)
                {
                    hash ^= 397 * Website.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Company_Headquarters_Address : global::System.IEquatable<ExampleQuery_Company_Headquarters_Address>, IExampleQuery_Company_Headquarters_Address
    {
        public ExampleQuery_Company_Headquarters_Address(global::System.String __typename, global::System.String? city)
        {
            this.__typename = __typename;
            City = city;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String? City { get; }

        public virtual global::System.Boolean Equals(ExampleQuery_Company_Headquarters_Address? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ((City is null && other.City is null) || City != null && City.Equals(other.City));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ExampleQuery_Company_Headquarters_Address)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                if (City != null)
                {
                    hash ^= 397 * City.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQueryResult
    {
        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company? Company { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Roadster? Roadster { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions?>? Missions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company
    {
        public global::System.String? Ceo { get; }

        public global::System.String? Coo { get; }

        public global::System.String? Cto { get; }

        public global::System.Int32? Employees { get; }

        public global::System.String? Summary { get; }

        public global::System.String? Name { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Links? Links { get; }

        public global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Headquarters? Headquarters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company_Info : IExampleQuery_Company
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Roadster
    {
        public global::System.Double? Apoapsis_au { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Roadster_Roadster : IExampleQuery_Roadster
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Missions
    {
        public global::System.String? Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Missions_Mission : IExampleQuery_Missions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company_Links
    {
        public global::System.String? Website { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company_Links_InfoLinks : IExampleQuery_Company_Links
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company_Headquarters
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String? City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQuery_Company_Headquarters_Address : IExampleQuery_Company_Headquarters
    {
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   company {
    ///     __typename
    ///     ceo
    ///     coo
    ///     cto
    ///     employees
    ///     summary
    ///     name
    ///     links {
    ///       __typename
    ///       website
    ///     }
    ///     headquarters {
    ///       __typename
    ///       city
    ///     }
    ///   }
    ///   roadster {
    ///     __typename
    ///     apoapsis_au
    ///   }
    ///   missions {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Mission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryQueryDocument : global::StrawberryShake.IDocument
    {
        private ExampleQueryQueryDocument()
        {
        }

        public static ExampleQueryQueryDocument Instance { get; } = new ExampleQueryQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x65, 0x6f, 0x20, 0x63, 0x6f, 0x6f, 0x20, 0x63, 0x74, 0x6f, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x72, 0x6f, 0x61, 0x64, 0x73, 0x74, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x70, 0x6f, 0x61, 0x70, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x20, 0x7d, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f9762d895f69b025bfd2f57325281e26");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   company {
    ///     __typename
    ///     ceo
    ///     coo
    ///     cto
    ///     employees
    ///     summary
    ///     name
    ///     links {
    ///       __typename
    ///       website
    ///     }
    ///     headquarters {
    ///       __typename
    ///       city
    ///     }
    ///   }
    ///   roadster {
    ///     __typename
    ///     apoapsis_au
    ///   }
    ///   missions {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Mission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryQuery : global::SpaceXGraphQLAPI.Client.IExampleQueryQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IExampleQueryResult> _operationExecutor;
        public ExampleQueryQuery(global::StrawberryShake.IOperationExecutor<IExampleQueryResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IExampleQueryResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IExampleQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IExampleQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ExampleQueryQueryDocument.Instance.Hash.Value, name: "ExampleQuery", document: ExampleQueryQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the ExampleQuery GraphQL operation
    /// <code>
    /// query ExampleQuery {
    ///   company {
    ///     __typename
    ///     ceo
    ///     coo
    ///     cto
    ///     employees
    ///     summary
    ///     name
    ///     links {
    ///       __typename
    ///       website
    ///     }
    ///     headquarters {
    ///       __typename
    ///       city
    ///     }
    ///   }
    ///   roadster {
    ///     __typename
    ///     apoapsis_au
    ///   }
    ///   missions {
    ///     __typename
    ///     id
    ///     name
    ///     ... on Mission {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface IExampleQueryQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IExampleQueryResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IExampleQueryResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the SpaceXGraphQLAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class SpaceXGraphQLAPIClient : global::SpaceXGraphQLAPI.Client.ISpaceXGraphQLAPIClient
    {
        private readonly global::SpaceXGraphQLAPI.Client.IExampleQueryQuery _exampleQuery;
        public SpaceXGraphQLAPIClient(global::SpaceXGraphQLAPI.Client.IExampleQueryQuery exampleQuery)
        {
            _exampleQuery = exampleQuery ?? throw new global::System.ArgumentNullException(nameof(exampleQuery));
        }

        public static global::System.String ClientName => "SpaceXGraphQLAPIClient";
        public global::SpaceXGraphQLAPI.Client.IExampleQueryQuery ExampleQuery => _exampleQuery;
    }

    /// <summary>
    /// Represents the SpaceXGraphQLAPIClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial interface ISpaceXGraphQLAPIClient
    {
        global::SpaceXGraphQLAPI.Client.IExampleQueryQuery ExampleQuery { get; }
    }
}

namespace SpaceXGraphQLAPI.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class MissionEntity
    {
        public MissionEntity(global::System.String? id = default !, global::System.String? name = default !)
        {
            Id = id;
            Name = name;
        }

        public global::System.String? Id { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::SpaceXGraphQLAPI.Client.ExampleQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::SpaceXGraphQLAPI.Client.State.MissionEntity, ExampleQuery_Missions_Mission> _exampleQuery_Missions_MissionFromMissionEntityMapper;
        public ExampleQueryResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::SpaceXGraphQLAPI.Client.State.MissionEntity, ExampleQuery_Missions_Mission> exampleQuery_Missions_MissionFromMissionEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _exampleQuery_Missions_MissionFromMissionEntityMapper = exampleQuery_Missions_MissionFromMissionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(exampleQuery_Missions_MissionFromMissionEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::SpaceXGraphQLAPI.Client.IExampleQueryResult);
        public ExampleQueryResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ExampleQueryResultInfo info)
            {
                return new ExampleQueryResult(MapIExampleQuery_Company(info.Company, snapshot), MapIExampleQuery_Roadster(info.Roadster, snapshot), MapIExampleQuery_MissionsArray(info.Missions, snapshot));
            }

            throw new global::System.ArgumentException("ExampleQueryResultInfo expected.");
        }

        private global::SpaceXGraphQLAPI.Client.IExampleQuery_Company? MapIExampleQuery_Company(global::SpaceXGraphQLAPI.Client.State.InfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IExampleQuery_Company returnValue = default !;
            if (data?.__typename.Equals("Info", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ExampleQuery_Company_Info(data.Ceo, data.Coo, data.Cto, data.Employees, data.Summary, data.Name, MapIExampleQuery_Company_Links(data.Links, snapshot), MapIExampleQuery_Company_Headquarters(data.Headquarters, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Links? MapIExampleQuery_Company_Links(global::SpaceXGraphQLAPI.Client.State.InfoLinksData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IExampleQuery_Company_Links returnValue = default !;
            if (data?.__typename.Equals("InfoLinks", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ExampleQuery_Company_Links_InfoLinks(data.Website);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::SpaceXGraphQLAPI.Client.IExampleQuery_Company_Headquarters? MapIExampleQuery_Company_Headquarters(global::SpaceXGraphQLAPI.Client.State.AddressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IExampleQuery_Company_Headquarters returnValue = default !;
            if (data?.__typename.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ExampleQuery_Company_Headquarters_Address(data.__typename ?? throw new global::System.ArgumentNullException(), data.City);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::SpaceXGraphQLAPI.Client.IExampleQuery_Roadster? MapIExampleQuery_Roadster(global::SpaceXGraphQLAPI.Client.State.RoadsterData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IExampleQuery_Roadster returnValue = default !;
            if (data?.__typename.Equals("Roadster", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ExampleQuery_Roadster_Roadster(data.Apoapsis_au);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions?>? MapIExampleQuery_MissionsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var missions = new global::System.Collections.Generic.List<global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                missions.Add(MapIExampleQuery_Missions(child, snapshot));
            }

            return missions;
        }

        private global::SpaceXGraphQLAPI.Client.IExampleQuery_Missions? MapIExampleQuery_Missions(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Mission", global::System.StringComparison.Ordinal))
            {
                return _exampleQuery_Missions_MissionFromMissionEntityMapper.Map(snapshot.GetEntity<global::SpaceXGraphQLAPI.Client.State.MissionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ExampleQueryResultInfo(global::SpaceXGraphQLAPI.Client.State.InfoData? company, global::SpaceXGraphQLAPI.Client.State.RoadsterData? roadster, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? missions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Company = company;
            Roadster = roadster;
            Missions = missions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::SpaceXGraphQLAPI.Client.State.InfoData? Company { get; }

        public global::SpaceXGraphQLAPI.Client.State.RoadsterData? Roadster { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Missions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ExampleQueryResultInfo(Company, Roadster, Missions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQueryBuilder : global::StrawberryShake.OperationResultBuilder<global::SpaceXGraphQLAPI.Client.IExampleQueryResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public ExampleQueryBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::SpaceXGraphQLAPI.Client.IExampleQueryResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::SpaceXGraphQLAPI.Client.IExampleQueryResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? missionsId = default !;
            _entityStore.Update(session =>
            {
                missionsId = Update_IExampleQuery_MissionsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "missions"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new ExampleQueryResultInfo(Deserialize_IExampleQuery_Company(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "company")), Deserialize_IExampleQuery_Roadster(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "roadster")), missionsId, entityIds, snapshot.Version);
        }

        private global::SpaceXGraphQLAPI.Client.State.InfoData? Deserialize_IExampleQuery_Company(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Info", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::SpaceXGraphQLAPI.Client.State.InfoData(typename, ceo: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ceo")), coo: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "coo")), cto: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cto")), employees: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "employees")), summary: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "summary")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), links: Deserialize_IExampleQuery_Company_Links(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "links")), headquarters: Deserialize_IExampleQuery_Company_Headquarters(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "headquarters")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::SpaceXGraphQLAPI.Client.State.InfoLinksData? Deserialize_IExampleQuery_Company_Links(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("InfoLinks", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::SpaceXGraphQLAPI.Client.State.InfoLinksData(typename, website: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "website")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::SpaceXGraphQLAPI.Client.State.AddressData? Deserialize_IExampleQuery_Company_Headquarters(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Address", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::SpaceXGraphQLAPI.Client.State.AddressData(typename, city: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::SpaceXGraphQLAPI.Client.State.RoadsterData? Deserialize_IExampleQuery_Roadster(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Roadster", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::SpaceXGraphQLAPI.Client.State.RoadsterData(typename, apoapsis_Au: Deserialize_Double(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "apoapsis_au")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double? Deserialize_Double(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Update_IExampleQuery_MissionsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var missions = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                missions.Add(Update_IExampleQuery_MissionsEntity(session, child, entityIds));
            }

            return missions;
        }

        private global::StrawberryShake.EntityId? Update_IExampleQuery_MissionsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Mission", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::SpaceXGraphQLAPI.Client.State.MissionEntity? entity))
                {
                    session.SetEntity(entityId, new global::SpaceXGraphQLAPI.Client.State.MissionEntity(Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::SpaceXGraphQLAPI.Client.State.MissionEntity(Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class InfoData
    {
        public InfoData(global::System.String __typename, global::System.String? ceo = default !, global::System.String? coo = default !, global::System.String? cto = default !, global::System.Int32? employees = default !, global::System.String? summary = default !, global::System.String? name = default !, global::SpaceXGraphQLAPI.Client.State.InfoLinksData? links = default !, global::SpaceXGraphQLAPI.Client.State.AddressData? headquarters = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Ceo = ceo;
            Coo = coo;
            Cto = cto;
            Employees = employees;
            Summary = summary;
            Name = name;
            Links = links;
            Headquarters = headquarters;
        }

        public global::System.String __typename { get; }

        public global::System.String? Ceo { get; }

        public global::System.String? Coo { get; }

        public global::System.String? Cto { get; }

        public global::System.Int32? Employees { get; }

        public global::System.String? Summary { get; }

        public global::System.String? Name { get; }

        public global::SpaceXGraphQLAPI.Client.State.InfoLinksData? Links { get; }

        public global::SpaceXGraphQLAPI.Client.State.AddressData? Headquarters { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class RoadsterData
    {
        public RoadsterData(global::System.String __typename, global::System.Double? apoapsis_Au = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Apoapsis_au = apoapsis_Au;
        }

        public global::System.String __typename { get; }

        public global::System.Double? Apoapsis_au { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class InfoLinksData
    {
        public InfoLinksData(global::System.String __typename, global::System.String? website = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Website = website;
        }

        public global::System.String __typename { get; }

        public global::System.String? Website { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class AddressData
    {
        public AddressData(global::System.String __typename, global::System.String? city = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            City = city;
        }

        public global::System.String __typename { get; }

        public global::System.String? City { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class ExampleQuery_Missions_MissionFromMissionEntityMapper : global::StrawberryShake.IEntityMapper<global::SpaceXGraphQLAPI.Client.State.MissionEntity, ExampleQuery_Missions_Mission>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ExampleQuery_Missions_MissionFromMissionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ExampleQuery_Missions_Mission Map(global::SpaceXGraphQLAPI.Client.State.MissionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ExampleQuery_Missions_Mission(entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class SpaceXGraphQLAPIClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Mission" => ParseMissionEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Mission" => FormatMissionEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMissionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMissionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.7.0.0")]
    public partial class SpaceXGraphQLAPIClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public SpaceXGraphQLAPIClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
